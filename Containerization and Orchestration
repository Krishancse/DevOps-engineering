In Java, you can work with containerization and orchestration tools such as Docker and Kubernetes using the Docker Java API and the Fabric8 Kubernetes client. Below is an example that demonstrates how to use the Docker Java API to manage containers:

```java
import com.github.dockerjava.api.DockerClient;
import com.github.dockerjava.api.command.CreateContainerResponse;
import com.github.dockerjava.core.DockerClientBuilder;
import com.github.dockerjava.core.command.PullImageResultCallback;

public class DockerJavaAPIExample {

    public static void main(String[] args) {
        DockerClient dockerClient = DockerClientBuilder.getInstance().build();

        // Pull an image
        dockerClient.pullImageCmd("nginx")
                .exec(new PullImageResultCallback())
                .awaitSuccess();

        // Create a container
        CreateContainerResponse container = dockerClient.createContainerCmd("nginx")
                .withCmd("nginx", "-g", "daemon off;")
                .withName("mynginx")
                .exec();

        // Start the container
        dockerClient.startContainerCmd(container.getId()).exec();

        // Stop the container
        dockerClient.stopContainerCmd(container.getId()).exec();

        // Remove the container
        dockerClient.removeContainerCmd(container.getId()).exec();
    }
}
```

For working with Kubernetes, you can use the Fabric8 Kubernetes client, which provides a Java API for interacting with Kubernetes. Here's a simple example of how to create a Kubernetes client and list pods in a cluster:

```java
import io.fabric8.kubernetes.client.Config;
import io.fabric8.kubernetes.client.ConfigBuilder;
import io.fabric8.kubernetes.client.DefaultKubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClient;

public class KubernetesClientExample {

    public static void main(String[] args) {
        Config config = new ConfigBuilder().build();
        KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);

        // List pods
        kubernetesClient.pods().inAnyNamespace().list().getItems().forEach(pod -> {
            System.out.println("Pod Name: " + pod.getMetadata().getName());
        });

        kubernetesClient.close();
    }
}
```

Make sure to include the necessary dependencies for Docker Java API and Fabric8 Kubernetes client in your Java project. These examples provide a basic understanding of how to interact with Docker and Kubernetes using Java. You can extend these examples to perform more complex operations based on your specific requirements.
